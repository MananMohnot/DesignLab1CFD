/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

// vertices
// (
//     (0 0 0)
//     (4 0 0)
//     (0 2 0)
//     (4 2 0)
//     (0 0 2)
//     (4 0 2)
//     (0 2 2)
//     (4 2 2)
// );

// blocks
// (
//     hex (0 1 3 2 4 5 7 6) (40 25 1) simpleGrading (1 1 1)
// );

// edges
// (
// );

// boundary
// (
//     bottomWall
//     {
//         type            wall;
//         faces           ((0 1 5 4));
//     }
//     topWall
//     {
//         type            wall;
//         faces           ((2 6 7 3));
//     }
    
// 	back
//     {
//         type            empty;
//         faces           ((0 2 3 1));
//     }
// 	front
//     {
//         type            empty;
//         faces           ((4 5 7 6));
//     }
    
//     inlet
//     {
//         type            patch;
//         faces           ((0 4 6 2));
//     }
//     outlet
//     {
//         type            patch;
//         faces           ((1 3 7 5));
//     }mergePatchPairs
// (
// );
// );

vertices
(
    (0 0 0)
    (4 0 0)
    (0 1 0)
    (4 1 0)
    (0 2 0)
    (4 2 0)
    (0 0 2)
    (4 0 2)
    (0 1 2)
    (4 1 2)
    (0 2 2)
    (4 2 2)
);

blocks
(
    hex (0 1 3 2 6 7 9 8) (40 25 1) simpleGrading (1 10 1)
    hex (2 3 5 4 8 9 11 10) (40 25 1) simpleGrading (1 0.1 1)
);

edges
(
);

boundary
(
    wallBottom
    {
        type            wall;
        faces           ((0 1 7 6));
    }
    wallTop
    {
        type            wall;
        faces           ((4 10 11 5));
    }
    
    in1
    {
        type            cyclic;
        neighbourPatch  out1;
        faces           ((0 6 8 2));
    }
    out1
    {
        type            cyclic;
        neighbourPatch  in1;
        faces           ((1 3 9 7));
    }
    
    in2
    {
        type            cyclic;
        neighbourPatch  out2;
        faces           ((2 8 10 4));
    }
    out2
    {
        type            cyclic;
        neighbourPatch  in2;
        faces           ((3 5 11 9));
    }
    
    sides1_half0
    {
        type            empty;
        faces           ((0 2 3 1));
    }
    sides1_half1
    {
        type            empty;
        faces           ((6 7 9 8));
    }

    sides2_half0
    {
        type            empty;
        faces           ((2 4 5 3));
    }
    sides2_half1
    {
        type            empty;
        faces           ((8 9 11 10));
    }    
);

mergePatchPairs
(
);